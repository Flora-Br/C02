#region librairies
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns
import streamlit as st
import warnings
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
import joblib
import zipfile
# Fonction pour charger les donn√©es une seule fois
@st.cache_data
def load_data(): # Charger le fichier CSV
    return pd.read_csv("data_cleaned.csv", index_col=0)

#endregion

#region option
pd.set_option('display.max_columns', None)
pd.set_option('display.float_format', '{:.2f}'.format)
warnings.filterwarnings('ignore')
#endregion

#region sidebar
st.sidebar.title("Sommaire")
pages= ['üë®‚ÄçüíªContexte',"üñºÔ∏è Cadre de l'analyse des donn√©es",'üßπ Nettoyage des donn√©es','üìà Data Visualisation', 'üè≠ Pre-processing','ü§ñ Mod√©lisation','üìö Synth√®se du projet','üöò D√©mo']
page=st.sidebar.radio('Allez vers', pages)

st.markdown(
    """
    <style>
    [data-testid="stSidebar"] {
        background-color: #7AA95C; /* Couleur de fond personnalis√©e */
    }
    </style>
    """,
    unsafe_allow_html=True
)

#region members
# Sidebar title
st.sidebar.title("Membres du projet :")

# Liste des membres avec leurs liens GitHub et LinkedIn
members = [
    {"name": "Antoine BARBIER",
    "github": "https://github.com/Antoine-DA",
    "linkedin": "https://www.linkedin.com/in/antoine-barbier-83654415b/"},
    {"name": "Flora BREN",
    "github": "https://github.com/flora-br",
    "linkedin": "https://www.linkedin.com/in/flora-b-68a80013a"},
    {"name": "Thibault EL MANSOURI",
    "github": "https://github.com/thibanso",
    "linkedin": "https://www.linkedin.com/in/el-mansouri-299932130/"},
]

# G√©n√©rer la liste des membres dans la sidebar
for member in members:
    st.sidebar.markdown(f"""
    <div style="display: flex; align-items: center; margin-bottom: 10px;">
        <div style="flex: 1;">{member['name']}</div>
        <a href="{member['github']}" target="_blank" style="margin-right: 8px;">
            <img src="https://cdn-icons-png.flaticon.com/32/25/25231.png" width="20" alt="GitHub">
        </a>
        <a href="{member['linkedin']}" target="_blank">
            <img src="https://cdn-icons-png.flaticon.com/32/174/174857.png" width="20" alt="LinkedIn">
        </a>
    </div>
    """, unsafe_allow_html=True)
#endregion
#endregion

if page == pages[0]: #Contexte
    
    st.markdown(
    """
    <div style="text-align: right;">
        <a href="https://datascientest.com" target="_blank">
            <img src="https://cdn.cookielaw.org/logos/08311578-d3d8-46d7-b6a2-30d80a44185a/56ecc322-2e5c-4e76-aa3b-cb09756551bc/32c1ae27-5e01-4d0e-88f0-963c0342ec9a/logo-2021.png" alt="Logo" width="250">
        </a>
    </div>
    """,
    unsafe_allow_html=True
)
    st.divider()
    st.title("Pr√©dictions d'√©mission de CO‚ÇÇ")
    st.divider()

    st.image('image/image_intro.webp', width = 400, use_container_width=1 )
    st.write("### Introduction")
    st.write("""Le dioxyde de carbone, commun√©ment appel√© CO2, est un composant vital de notre atmosph√®re qui
joue un r√¥le essentiel dans le soutien de la vie sur Terre. Cependant, au fil des ans, les activit√©s
humaines ont consid√©rablement augment√© les niveaux de CO2 dans l‚Äôatmosph√®re, entra√Ænant de
graves cons√©quences pour l‚Äôenvironnement. En 2022, les √©missions mondiales de CO2 ont atteint un
niveau record de plus de **36,8 gigatonnes**.\n
Les √©missions de CO2 ont des co√ªts √©conomiques importants, et notamment en termes de sant√©
publique, de **d√©gradation de l'environnement et de changement climatique**.
En effet, les √©missions de CO2 contribuent √† la pollution de l'air, ce qui peut entra√Æner des probl√®mes
de sant√© tels que des maladies respiratoires et cardiovasculaires. Les co√ªts associ√©s aux soins de
sant√© pour traiter ces maladies peuvent √™tre consid√©rables.\n
Elles contribuent aussi au changement climatique, ce qui peut entra√Æner des ph√©nom√®nes
m√©t√©orologiques extr√™mes, tels que des temp√™tes, des inondations et des s√©cheresses. Ces
√©v√©nements peuvent causer des dommages importants aux infrastructures, aux cultures agricoles et
aux √©cosyst√®mes, entra√Ænant des co√ªts √©conomiques √©lev√©s.\n
Le Groupe d'experts intergouvernemental sur l'√©volution du climat (GIEC) a publi√© des rapports
d√©taillant les √©missions de CO2 par secteur, y compris le secteur des transports. Selon le GIEC, environ
**15% des √©missions mondiales** de gaz √† effet de serre proviennent directement du secteur des
transports. Parmi ces √©missions, environ **70%** sont attribu√©es au **transport routier**, ce qui inclut les
voitures particuli√®res.""")
    st.image('image/GES_transport.jpg', width=500)
    st.markdown(
    """
    <div style="text-align: left;">
        <p style="font-size: smaller; color: lightgrey; font-style: italic; margin-top: 5px;">
            Source: <a href="https://www.europarl.europa.eu/topics/fr/article/20190313STO31218/emissions-de-co2-des-voitures-faits-et-chiffres-infographie" target="_blank" style="color: lightgrey; text-decoration: none;">
            Parlement Europ√©en, 17 F√©vrier 2023</a>
        </p>
    </div>
    """,
    unsafe_allow_html=True
)

    st.write("""
Les gouvernements et les entreprises doivent investir dans des mesures d'adaptation et de mitigation
pour faire face aux impacts du changement climatique.\n
**En identifiant les v√©hicules les plus polluants et en comprenant les caract√©ristiques techniques
responsables de la pollution, les constructeurs automobiles pourraient utiliser ces informations pour
am√©liorer la conception de leurs v√©hicules et investir dans l'innovation afin de r√©duire les √©missions
de CO2.**\n
Un mod√®le de pr√©diction des √©missions de CO2 pourrait permettre de pr√©voir les niveaux de pollution
pour de nouveaux types de v√©hicules, aidant ainsi √† r√©duire les co√ªts √©conomiques et
environnementaux associ√©s aux √©missions de CO2.""")
        
if page == pages[1]: #Cadre analyse des donn√©es
    st.header("1 - Cadre de l'analyse de donn√©es")
    st.divider()

    url = "https://www.data.gouv.fr/fr/datasets/emissions-de-co2-et-de-polluants-des-vehicules-commercialises-en-france/"
    with st.expander('1.1 - Premier jeu de donn√©es'):
        st.markdown("""
        Le premier fichier porte sur les √©missions de CO2, de polluants et les caract√©ristiques des v√©hicules 
        commercialis√©s en France relatif √† l‚Äôann√©e 2014. Ce fichier est disponible librement sur le site de
        [data.gouv.fr](%s) et s‚Äôintitule ¬´mars-2014-complete.csv¬ª.
        
        Il est accompagn√© d‚Äôun dictionnaire des variables permettant d‚Äôavoir la d√©finition des abr√©viations et
        les unit√©s de mesures utilis√©es. Toutefois la seule lecture des l√©gendes est apparue insuffisante afin
        de comprendre certaines caract√©ristiques techniques des v√©hicules, il a donc √©t√© proc√©d√© √† des
        recherches compl√©mentaires afin d‚Äôavoir une lecture optimale du jeu de donn√©es.
        
        Il a √©t√© renomm√© df_fr pour la premi√®re partie d‚Äôobservation du fichier.
        
        Ce premier jeu de donn√©es comporte 55 044 lignes et 30 colonnes.
        Il contient les informations ci-dessous:
        """ % url)
        df=pd.read_excel('tableau.xlsx', sheet_name='df_fr')
        st.dataframe(df)
    url = "https://www.eea.europa.eu/en/datahub/datahubitem-view/fa8b1229-3db6-495d-b18e-9c9b3267c02b"
    with st.expander('2.2 - Deuxi√®me jeu de donn√©es'):
        st.markdown("""
        Un second jeu de donn√©es porte sur les √©missions de CO2 des v√©hicules produits en Europe relatif √†
        l‚Äôann√©e 2023. Ce fichier est disponible librement sur le site [European Environment Agency3](%s) et
        s‚Äôintitule ¬´data.csv¬ª.
        
        Il est accompagn√© d‚Äôun dictionnaire des variables permettant d‚Äôavoir la d√©finition des abr√©viations et
        les unit√©s de mesures utilis√©es. Sur le m√™me principe que le premier jeu de donn√©es, ce dictionnaire a
        √©t√© compl√©t√© par des d√©finitions afin d‚Äôavoir une meilleure lecture du jeu de donn√©es.
        
        Il a √©t√© renomm√© df_eu pour la premi√®re partie d‚Äôobservation du fichier.

        Il contient les informations suivantes :""" % url)
        df2=pd.read_excel('tableau.xlsx', sheet_name='df_eu')
        st.dataframe(df2)
    st.markdown("""
    Les deux fichiers contiennent des informations int√©ressantes et utiles pour alimenter le sujet.

    La qualit√© du premier jeu de donn√©es est bonne car il poss√®de tr√®s peu de NaN. Mais nous avons not√©
    toutefois que ce fichier contenait des informations datant de 2014 ce qui semble trop √©loign√© de la
    r√©alit√© des √©missions de CO2 produites par les nouvelles g√©n√©rations de v√©hicules.

    Le second fichier df_eu contient une colonne intitul√©e ¬´country¬ª et nous permet de constater que
    les informations relatives √† la France sont inclus dans ce fichier. Les informations sont relatives √†
    l‚Äôann√©e 2023, cela nous permet donc d‚Äôavoir des donn√©es plus r√©centes.
    La r√©cence des donn√©es, la multiplicit√© des types de v√©hicule et la mesure utilis√©e pour les √©missions
    de CO2 contenu dans le fichier df_eu sont des param√®tres qui nous sont apparus plus pertinent pour
    notre sujet.\n
    **Le jeu de donn√©es conserv√© pour cette √©tude est donc le fichier df_eu.**
    """)

if page == pages[2]: #Nettoyage des donn√©es
    st.header('2 - √âtapes du nettoyage de donn√©es :')
    st.divider()

#region √©tape nettoyage
    with st.expander('2.1 Suppression des colonnes vides'): #2.1
        st.markdown(""" 
Nous avons dans un premier temps supprim√© toutes les **colonnes vides**, colonnes qui contenaient
toujours les m√™mes valeurs, ou les colonnes qui n'apportent aucune information en rapport avec
l‚Äôobjet de notre √©tude.

Nous avons donc supprim√© les colonnes : MMS, r , Enedc (g/km), W (mm), At1 (mm), At2 (mm),
Ernedc (g/km), De, Vf, Status, year, Date of registration. """)
        st.code("""#Suppression des colonnes inutiles pour le mod√®le
drop_col = ['Country','VFN','Mp','Mh','Man','Tan','T','Va','Ve','Mk','Cn','IT','ech','RLFI']
""")
        
    with st.expander('2.2 Suppression des doublons avant nettoyage'): #2.2
        st.markdown("""Nous avons par la suite identifi√© et **supprim√© les doublons** sur les colonnes restantes. Cela nous a
permis de r√©duire drastiquement la taille de notre jeu de donn√©es.""")
        df = pd.DataFrame({'Nombre colonne':[39,27],'Nombre ligne':['10 734 656','1 804 116'],'Taille du fichier (Mo)':['2 450 Mo','388 Mo']}, index=['Tableau avant supression','Tableau apr√®s suppression'])
        df
        st.code("""df_eu = df_eu.drop(columns=drop_col)
                """)
        
    with st.expander('2.3 Suppression des colonnes inutiles pour le mod√®le de Machine Learning'): #2.3
        st.markdown("""Nous avons ensuite r√©alis√© un tableau permettant d‚Äôidentifier les colonnes qui nous seraient utiles ou non pour exploiter notre jeu de donn√©es.\n
Pour rappel, l‚Äôobjectif √©tant in fine d‚Äô√©tablir un mod√®le permettant √† un constructeur de renseigner les caract√©ristiques techniques d‚Äôun futur v√©hicule, et que celui-ci lui 
retourne une pr√©diction sur les √©missions de CO2, nous nous sommes, pour chaque colonne poser la question :\n
<span style="color:red;"><i>Est-ce que l‚Äôinformation dans cette colonne est pertinente pour pr√©dire l‚Äô√©mission de CO2?</i></span>
""",
    unsafe_allow_html=True
)  
        df=pd.read_excel('tableau.xlsx', sheet_name='tableau_pertinence')
        st.dataframe(df)
        st.markdown("""Le r√©sultat de cette √©tape a permis passer d‚Äôun jeu de donn√©es de **27 colonnes** √† un jeu de donn√©es de **13 colonnes**.
""")
        st.code("""#Suppression des colonnes inutiles pour le mod√®le
drop_col = ['Country','VFN','Mp','Mh','Man','Tan','T','Va','Ve','Mk','Cn','IT','ech','RLFI']
df_eu = df_eu.drop(columns=drop_col)""")
        
    with st.expander("2.4.1 Cr√©ation de colonnes 'interm√©diaires'"): #2.4.1
        st.markdown("""
                    Nous d√©cidons de cr√©er une nouvelle colonnes qui combine l'information des colonnes <span style="color : red;"><i>Fuel Type (Ft)</i></span> et <span style="color : red;"><i>Fuel Mode (Fm)</i></span>"""
                    ,unsafe_allow_html=True)
        df=pd.read_excel('tableau.xlsx', sheet_name='fuel_type')
        st.dataframe(df)
        
        st.code("""
               
               #On convertit les valeurs de Ft en minuscule
df_eu['Ft'] = df_eu['Ft'].str.lower()

#Cr√©ation d'une nouvelle colonne plus d√©taill√©es pour le type de moteur
#qui synth√©tise Ft (fuel type) et Fm (fuel mode)
#Au final il y a donc 12 cat√©gories
df_eu['fuel_type'] = ''
df_eu.loc[(df_eu['Ft']=='petrol')&(df_eu['Fm']=='H'), 'fuel_type'] = 'PHNR' 
df_eu.loc[(df_eu['Ft']=='petrol')&(df_eu['Fm']=='M'), 'fuel_type'] = 'P' 
df_eu.loc[df_eu['Ft']=='petrol/electric', 'fuel_type'] ='PHR' 
df_eu.loc[(df_eu['Ft']=='diesel')&(df_eu['Fm']=='H'), 'fuel_type'] = 'DHNR' 
df_eu.loc[(df_eu['Ft']=='diesel')&(df_eu['Fm']=='M'), 'fuel_type'] = 'D' 
df_eu.loc[df_eu['Ft']=='diesel/electric', 'fuel_type'] ='DHR' 
df_eu.loc[df_eu['Ft']=='hydrogen', 'fuel_type'] = 'H' 
df_eu.loc[df_eu['Ft']=='lpg', 'fuel_type'] = 'GPL' 
df_eu.loc[(df_eu['Ft']=='e85')&(df_eu['Fm']=='H'), 'fuel_type'] = 'E85NR' 
df_eu.loc[(df_eu['Ft']=='e85')&(df_eu['Fm']=='F'), 'fuel_type'] = 'E85F'
df_eu.loc[df_eu['Ft']=='ng', 'fuel_type'] = 'GN' """
)
    
    with st.expander('2.4.2 Les cat√©gories de v√©hicules'):#2.4.2
        st.markdown("""Nous avons deux colonnes <span style="color : red;"><i>Cr</i></span> et <span style="color : red;"><i>Ct</i></span> qui nous informe sur les cat√©gories des v√©hicules suivantes :
""", unsafe_allow_html=True)
        df=pd.read_excel('tableau.xlsx', sheet_name='categorie_vehicule')
        st.dataframe(df)
        st.markdown("""La colonne Ct, contient les 6 cat√©gories, mais contient **1109 valeurs manquantes**.
Nous d√©cidons donc de conserver la colonne Ct ‚Äì qui semble plus fiable ‚Äì et dans les cas o√π les valeurs sont manquantes, nous lui **attribuons la valeur qui √©tait contenu dans Cr**.
""")
        st.code("""df_eu['Ct'] = df_eu['Ct'].fillna(df_eu['Cr'])
""")
        st.markdown("""√âtant donn√© le faible volume de v√©hicules des cat√©gories N1,N1G, N2, N2G (254 v√©hicules) nous d√©cidons de **supprimer** les lignes pour lesquelles Ct inclut une de ces quatre cat√©gories.
 
De plus, nous supprimons Cr qui ne nous servira plus.
""")
        st.code("""#On supprime les valeurs peu fr√©quentes, √† savoir N1, N1G, N2 et N2G
df_eu = df_eu.drop(df_eu[df_eu['Ct'] =='N1'].index)
df_eu = df_eu.drop(df_eu[df_eu['Ct'] =='N1G'].index)
df_eu = df_eu.drop(df_eu[df_eu['Ct'] =='N2'].index)
df_eu = df_eu.drop(df_eu[df_eu['Ct'] =='N2G'].index)

#Suppression de Cr
df_eu = df_eu.drop(columns=['Cr'])""")
    
    with st.expander('2.5 Suppression de lignes et de colonnes jug√©es non-pertinentes pour le mod√®le de machine learning') : #2.5
        st.markdown("""L‚Äô√©tape d√©crite en 2.4.1 nous a permis d‚Äôidentifier des v√©hicules qui n‚Äô√©mettent pas de CO2.
Cela repr√©sente les v√©hicules qui ont un moteur √† **hydrog√®ne** ou **√©lectrique**. 
Nous d√©cidons donc de supprimer tous les v√©hicules qui ont un de ces deux types de moteur.\n
Nous d√©cidons √©galement de supprimer les colonnes <span style="color : red;"><i>Ft</i></span> et <span style="color : red;"><i>Fm</i></span> qui ne nous serviront plus.
""", unsafe_allow_html=True)
        st.code("""#Suppression des v√©hicules qui n'√©mettent pas de CO2. 
df_eu = df_eu.drop(df_eu[df_eu['Ft'] =='electric'].index)
df_eu = df_eu.drop(df_eu[df_eu['Ft'] =='hydrogen'].index)
df_eu = df_eu.drop(df_eu[df_eu['Ft'] =='unknown'].index)

#Suppression des colonnes Ft Fm,
df_eu = df_eu.drop(columns=['Ft','Fm'])""")
        
    with st.expander('2.6 Remplacement des valeurs manquantes pour les v√©hicules non-hybrides'): #2.6
        st.markdown("""Les colonnes <span style="color : red;"><i>z (Wh/km)</i></span>, <span style="color : red;"><i>Electric range (km)</i></span> sont des colonnes qui donnent des informations sur la consommation √©lectrique et l‚Äôautonomie en mode √©lectrique des v√©hicules hybrides.
 
Nous consid√©rons que ce sont des **donn√©es int√©ressantes** pour notre mod√®le de Machine Learning.

Toutefois, pour les v√©hicules non-hybrides, ces valeurs sont manquantes. Nous d√©cidons de les remplacer par des 0, car ces v√©hicules n‚Äôont ni consommation √©lectrique, ni autonomie en mode √©lectrique, et cela ne faussera pas la performance du mod√®le.
 
La colonne <span style="color : red;"><i>Erwltp (g/km)</i></span> correspond √† la r√©duction d‚Äô√©mission de CO2 mise en place par **certains constructeurs**.
Les v√©hicules ne disposant pas d‚Äôune telle technologie ont une valeur manquante dans cette colonne.
Nous d√©cidons √©galement de remplacer ces valeurs manquantes par des 0.
""", unsafe_allow_html=True)
        st.code("""#On remplace les NaN de la consommation √©lectrique par des 0
df_eu['z (Wh/km)'] = df_eu['z (Wh/km)'].fillna(0)

#On remplace les NaN de la r√©duction d'√©mission de CO2 par des 0
df_eu['Erwltp (g/km)'] = df_eu['Erwltp (g/km)'].fillna(0)

#On remplace les NaN de l'autonomie √©lectrique par des 0
df_eu['Electric range (km)'] = df_eu['Electric range (km)'].fillna(0)""")
        
    with st.expander('2.7 Suppression des lignes dont la variable cible est manquante'): #2.7
        st.markdown("""Nous supprimons les lignes dont la variable cible <span style="color : red;"><i>Ewltp (g/km)</i></span> n'est pas renseign√©e. 
""",unsafe_allow_html=True)
        st.code("""#Suppression des lignes o√π la variable cible est manquante
df_eu = df_eu.dropna(subset=['Ewltp (g/km)'])""")
    
    with st.expander("""2.8 R√©duction de dimension pour la variable cible"""): #2.8
        st.markdown("""Apr√®s ces premi√®res √©tapes, nous remarquons que certains v√©hicules ont des √©missions de CO2 relativement faibles (< 10 g/km).

Apr√®s v√©rification de certains mod√®les sur Internet, nous doutons de la fiabilit√© des donn√©es contenues dans la colonne <span style="color : red;"><i>Ewltp (g/km)</i></span>.

Nous d√©cidons donc de fixer un seuil de gramme de CO2 √©mis par km, en dessous duquel il nous para√Æt tr√®s improbable que l‚Äôinformation soit fiable.
 
Ce seuil a √©t√© fix√© √† 15 g/km
""",unsafe_allow_html=True)
        st.code("""#Suppression des lignes dans lesquelles la variable cible est inf√©rieur 
#√† un seuil (ici inf√©rieur ou √©gal √† 15)
df_eu = df_eu.drop(df_eu[df_eu['Ewltp (g/km)'] <=15].index)""")
     
    with st.expander('2.9 Identification des probl√®mes de multi-colin√©arit√©'): #2.9
        st.markdown("""Nous souhaitons maintenant nous int√©resser au probl√®me de multicolin√©arit√©.""")
        st.image('image/heatmap.png')
        st.markdown("""Cette matrice, nous permet d‚Äôidentifier deux multi-colin√©arit√©s :
- Entre <span style="color : red;"><i>Mt</i></span> ‚Äì le poids total d‚Äôun v√©hicule en conditions de test ‚Äì et <span style="color : red;"><i>m (kg)</i></span>, la Masse (ùëü = 0.99)
- Entre <span style="color : red;"><i>Electric range (km)</i></span> et <span style="color : red;"><i>z (Wh/km)</i></span> (ùëü = 0.93)""", unsafe_allow_html=True)
        st.code("""
                #Suite √† l'analyse de la heatmap, on d√©cide de supprimer la colonne Mt, 
#qui correspondait au 'poids total d'un v√©hicule dans les conditions de test'
#car cette colonne contenait plus de NaN que la colonne m (kg)
df_eu = df_eu.drop(columns='Mt')

#Suite √† l'analyse de la heatmap, on d√©cide de supprimer la colonne 'z (Wh/km)' 
#qui correspondait √† la consommation √©lectrique
df_eu = df_eu.drop(columns='z (Wh/km)')""")
        
    with st.expander('2.10 Suppression des doublons apr√®s nettoyage'): #2.10
        st.markdown("""Une fois toutes ces √©tapes de nettoyage finalis√©es, nous supprimons une deuxi√®me fois les doublons dans le jeu de donn√©es restant.
""")
        st.code("""#On r√©enl√®ve les derniers doublons
df_eu.drop_duplicates(inplace=True)""")
        df=pd.read_excel('tableau.xlsx', sheet_name='duplicate_delete')
        st.dataframe(df)
#endregion

if page == pages[3]:  #Data Visualisation
    
    # Charger les donn√©es une seule fois
    data_cleaned = load_data()
    st.header("3 - Data visualisation")
    st.divider()

    st.subheader("3.1 Distribution de la variable cible : Emissions CO2 (g/km)")
    st.write("""
    La distribution de la variable cible nous permet de visualiser comment les √©missions de CO2 (en g/km) sont r√©parties dans notre jeu de donn√©es.
    Cela peut nous aider √† identifier des tendances g√©n√©rales, des valeurs extr√™mes ou des comportements inhabituels dans les donn√©es.
    """)
    # Cr√©er le graphique de distribution
    plt.figure(figsize=(10, 6))
    sns.histplot(data_cleaned['Ewltp (g/km)'], kde=True, bins=30, color='blue', edgecolor='black')
    plt.title('Distribution des √©missions de CO2 (g/km)', fontsize=16)
    plt.xlabel('Emissions CO2 (g/km)', fontsize=12)
    plt.ylabel('Fr√©quence', fontsize=12)
    # Afficher le graphique dans Streamlit
    st.pyplot(plt)
    
    # Affichage de la heatmap
    st.subheader("3.2 Heatmap des corr√©lations entre les variables num√©riques :")
    st.write("""
    Cette heatmap permet d'analyser les corr√©lations entre les diff√©rentes variables num√©riques de notre jeu de donn√©es. 
    Cela nous permet de comprendre comment les variables se lient entre elles et de mieux saisir l'impact de certaines caract√©ristiques sur les √©missions de CO2.
    """)
    
    # S√©lectionner les colonnes num√©riques
    data_numeric = data_cleaned[['m (kg)', 'Ewltp (g/km)', 'ec (cm3)', 'ep (KW)', 'Fuel consumption ']]
    
    # Calculer la matrice de corr√©lation
    correlation_matrix = data_numeric.corr()
    
    # Afficher la heatmap
    plt.figure(figsize=(10, 8))
    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
    plt.title('Matrice de corr√©lation des variables num√©riques')
    st.pyplot(plt)  # Affiche la heatmap dans Streamlit
    st.subheader("3.3 Analyse de l'impact des param√®tres sur les √©missions de CO2")
    st.write("""
    Les graphiques ci-dessous montrent la relation entre les √©missions de CO2 et diff√©rents param√®tres des v√©hicules, ceci sera affich√© toujours en fonction des types de carburants. 
    L'objectif est de visualiser l'impact de la masse, de la capacit√© du moteur, de sa puissance et de la consommation de carburant 
    sur ces √©missions CO2 afin de mieux comprendre comment ces caract√©ristiques influencent l'empreinte √©cologique des v√©hicules.
    """)
    # Dictionnaire pour associer les colonnes aux noms plus clairs uniquement pour l'affichage
    colonnes_renommees = {
        'm (kg)': 'Masse du v√©hicule (kg)',
        'ec (cm3)': 'Capacit√© moteur (cm3)',
        'ep (KW)': 'Puissance moteur (KW)',
        'Fuel consumption ': 'Consommation de carburant (L/100km)',
        'Ewltp (g/km)': 'Emissions CO2 (g/km)'  # Emissions CO2 est l'axe Y fixe
    }
    # Liste des colonnes disponibles pour l'axe X
    colonnes_disponibles = ['m (kg)', 'ec (cm3)', 'ep (KW)', 'Fuel consumption ']
    # Renommer les colonnes disponibles en affichage lisible (utilisation du dictionnaire)
    colonnes_disponibles_renommees = [colonnes_renommees[col] for col in colonnes_disponibles]
    # Liste d√©roulante pour choisir la colonne pour l'axe X avec les noms clairs
    axe_x_choisi = st.selectbox('Choisissez la colonne pour l\'axe X', colonnes_disponibles_renommees)
    # On r√©cup√®re la colonne d'origine en fonction du choix fait par l'utilisateur
    axe_x = [col for col, name in colonnes_renommees.items() if name == axe_x_choisi][0]
    # L'axe Y est fixe sur 'Ewltp (g/km)' pour les √©missions CO2
    axe_y = 'Ewltp (g/km)'
    axe_y_renomme = colonnes_renommees[axe_y]  # Nom affich√© pour l'axe Y
    # Cr√©er le graphique de relation entre les colonnes choisies
    st.write("Voici le graphique :")
    plt.figure(figsize=(10, 8))
    sns.scatterplot(x=axe_x, y=axe_y, hue='fuel_type', data=data_cleaned)
    plt.title(f'Relation entre la variable {axe_x_choisi} et les √©missions CO2 en g/km')
    plt.xlabel(axe_x_choisi)
    plt.ylabel(axe_y_renomme)
    plt.legend(title='Type de carburant')
    st.pyplot(plt)  # Affiche le graphique dans Streamlit
    # Texte explicatif pour le scatterplot
    if axe_x == 'm (kg)':  # Masse du v√©hicule
        st.markdown("""
        *Ce graphique montre la relation entre la masse du v√©hicule (en kg) et les √©missions de CO2 (en g/km).* 
        *Les v√©hicules plus lourds ont tendance √† produire davantage d‚Äô√©missions de CO2.* 
        *Nous pouvons supposer que cela s‚Äôexplique par le fait que les v√©hicules plus lourds n√©cessitent plus d'√©nergie pour √™tre d√©plac√©s, ce qui entra√Æne une combustion accrue de carburant.*
        *La masse d‚Äôun v√©hicule est un facteur cl√© influen√ßant les √©missions de CO2, mais l‚Äôimpact varie selon le type de carburant utilis√©.*
        """)
    elif axe_x == 'ec (cm3)':  # Capa moteur
        st.markdown("""
        *Ce graphique montre la relation entre la capacit√© du moteur (en cm¬≥) et les √©missions de CO2.* 
        *Les v√©hicules avec un moteur plus gros (plus de cm¬≥) √©mettent davantage de CO2, car ces moteurs n√©cessitent plus de carburant pour fonctionner,* 
        *ce qui entra√Æne une combustion plus importante et une production accrue de gaz √† effet de serre, notamment du dioxyde de carbone.*
        """)
    elif axe_x == 'ep (KW)':  # Puissance du moteur
        st.markdown("""
        *Ce graphique montre la relation entre la puissance du moteur (en kW) et les √©missions de CO2.* 
        *Une puissance plus √©lev√©e est associ√©e √† des √©missions de CO2 plus √©lev√©es, car un moteur plus puissant consomme davantage de carburant pour g√©n√©rer cette √©nergie suppl√©mentaire,* 
        *ce qui entra√Æne une augmentation des rejets de gaz √† effet de serre dans l'atmosph√®re.*
        """)
    elif axe_x == 'Fuel consumption ':  # Consommation de carburant
        st.markdown("""
        *Ce graphique montre la relation entre la consommation de carburant (en litres aux 100 km) et les √©missions de CO2.* 
        *Nous observons un lien entre la consommation de carburant et les √©missions de CO2. Lorsque la consommation augmente, les √©missions tendent √©galement √† augmenter.* 
        *Nous pouvons supposer qu‚Äôune plus grande consommation entra√Æne une combustion accrue de carburant, entra√Ænant plus d'√©missions de CO2.*
        """)

if page == pages[4]: #Pre-processing
    st.header('4 - Pr√©-processing')
    st.divider()
    st.subheader("4.1 Cr√©ation du jeu d'entra√Ænement et du jeu de test")
    st.markdown("""Une fois le jeu de donn√©es bien nettoy√©, nous cr√©ons nos jeux d'entra√Ænement et de test.
Le jeu d'entra√Ænement (X_train, y_train) repr√©sente 80% des donn√©es.
Le jeu d'entra√Ænement (X_test, y_test) repr√©sente 20% des donn√©es.""")
    st.code("""feats = df_eu.drop(columns='Ewltp (g/km)')
target = df_eu['Ewltp (g/km)']
X_train, X_test, y_train, y_test = train_test_split(
    feats, target, random_state = 41, test_size = 0.2)""")
    
    st.subheader("4.2 Gestion des valeurs manquantes")
    st.markdown("""Pour les valeurs manquantes des colonnes m (kg), ec (cm3), ep (KW) et Fuel consumption, nous choisissons de les remplacer par la m√©diane, 
qui est r√©sistante aux valeurs extr√™mes contenues dans certaines colonnes.""")
    st.code("""#Gestion des valeurs manquantes
imputer = SimpleImputer(missing_values=np.nan, strategy='median')
num_col_NA = ['m (kg)','ec (cm3)','ep (KW)','Fuel consumption ']
num_col = ['m (kg)','ec (cm3)','ep (KW)','Fuel consumption ','Electric range (km)','Erwltp (g/km)']

X_train.loc[:,num_col_NA] = imputer.fit_transform(X_train[num_col_NA])
X_test.loc[:,num_col_NA] = imputer.transform(X_test[num_col_NA])""")
    
    st.subheader("4.3  Encodage ")
    st.markdown("""Pour l‚Äôencodage des variables cat√©gorielles Ct et fuel_type, nous optons pour OneHotEncoder, car ces variables ne pr√©sentent pas de 
relation d'ordre entre leurs diff√©rentes cat√©gories.""")
    st.code("""#Encodage des variables cat√©gorielles
oneh = OneHotEncoder(drop = 'first', sparse_output=False)
cat_col = ['Ct','fuel_type']
X_train_encoded = oneh.fit_transform(X_train[cat_col])
X_test_encoded = oneh.transform(X_test[cat_col])

#Conversion en DataFrame
noms_colonnes_cat = oneh.get_feature_names_out(cat_col)
X_train_encoded = pd.DataFrame(X_train_encoded, columns=noms_colonnes_cat, index = X_train.index)
X_test_encoded = pd.DataFrame(X_test_encoded, columns=noms_colonnes_cat, index = X_test.index)""")
    
    st.subheader("4.4  Standardisation")
    st.markdown("""Enfin, pour la Standardisation, nous utilisons StandardScaler pour uniformiser les valeurs 
des variables num√©riques afin de pouvoir entra√Æner des mod√®les de familles diff√©rentes.""")
    st.code("""#Standardisation des variables num√©riques
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train[num_col])
X_test_scaled = scaler.transform(X_test[num_col])

#Conversion en DataFrame
noms_colonnes_num = scaler.get_feature_names_out(num_col)
X_train_scaled = pd.DataFrame(X_train_scaled, columns=noms_colonnes_num, index = X_train.index)
X_test_scaled = pd.DataFrame(X_test_scaled, columns=noms_colonnes_num, index = X_test.index)""")
    
    st.subheader("4.5 Reconstition de DataFrame")
    st.markdown("""Enfin, nous reconstituons le DataFrame pour la mod√©lisation.""")
    st.code("""
#Reconstition du tableau apr√®s encodage
X_train.drop(columns=cat_col)
X_test.drop(columns=cat_col)
X_train = pd.concat([X_train_encoded,X_train_scaled], axis = 1)
X_test = pd.concat([X_test_encoded,X_test_scaled], axis = 1)""")

if page == pages[5]: #Mod√©lisation
    #Titre de la page
    st.header("5 - Mod√©lisation")
    st.divider()
    regtab, classtab = st.tabs(["R√©gression", "Classfication"])
    with regtab:
        st.subheader("5.1 Mod√®les de r√©gression")
        
        #Option pour les mod√®les et les m√©triques
        regression_model_option = ["R√©gression Lin√©aire","Arbre de d√©cision","For√™t al√©atoire","XGB Regressor"]
        regression_metric_option = ["Score Train","R¬≤","MAE","MSE","RMSE"]

        #S√©lection par l'utilisateur du contenu √† afficher
        model_selection = st.pills("Mod√®le(s)", regression_model_option, selection_mode="multi")
        metric_selection = st.pills("M√©trique(s)", regression_metric_option, selection_mode="multi")
        
        #Chargement du fichier
        df = pd.read_excel('tableau.xlsx', sheet_name='regression')

        if model_selection and metric_selection:
            # Filtrer les mod√®les choisis
            df_filtered = df[df["Mod√®le"].isin(model_selection)]

            # Garder uniquement les colonnes s√©lectionn√©es
            columns_to_display = ["Mod√®le"] + metric_selection
            df_display = df_filtered[columns_to_display]

            # Arrondir les r√©sultats num√©riques √† deux chiffres apr√®s la virgule
            df_display = df_display.round(2)

            # Afficher le tableau filtr√©
            st.write("### R√©sultats :")
            st.dataframe(df_display, use_container_width=True)

        st.subheader("5.2 Optimisation du mod√®le de R√©gression")
        st.markdown("""GridSearchCv est une technique utilis√©e en apprentissage automatique pour optimiser les hyper param√®tres d'un mod√®le. Nous allons donc chercher les meilleurs hyperparam√®tres permettant d‚Äôam√©liorer les performances de notre mod√®le Random Forest.

    Cela nous donne les r√©sultats suivants : """)
        st.code("""Meilleurs param√®tres : {
        'max_depth': 30, #Profondeur maximale des arbres
        'max_features': 'sqrt', #Combien de caract√©ristiques sont prises en compte √† chaque noeud
        'min_samples_leaf': 1, #Nombre minimal d'√©chantillon dans une feuille terminal
        'min_samples_split': 10, #Nombre minimal d'√©chantillon pour la division d'un noeud
        'n_estimators': 300 #Nombre d'arbres dans la for√™t
        }
    """)
        st.markdown("""Cette optimisation permet d'am√©liorer le mod√®le :""")
        df_opti = df.loc[(df['MSE']==198.22)|(df['MSE']==173.70)]
        st.dataframe(df_opti, use_container_width=True)
        
        st.markdown("""Nous avons ensuite √©tudi√© les r√©sidus, c'est √† dire la diff√©rence entre les valeurs r√©elles et les valeurs pr√©dites. 
                    Plus une valeur est proche de l'axe centrale, plus le mod√®le l'a bien pr√©dite. """)
        st.image('image/residu.png')
        st.markdown("""On observe une ligne au niveau du 112 g/km qui pose probl√®me. 
                    Nous revenons donc au niveau du nettoyage des donn√©es et nous supprimons les lignes pour lequelles la colonne Ewltp (g/km) vaut 112.""")
        st.code("df_eu = df_eu.drop(df_eu[df_eu['Ewltp (g/km)']==112].index)")
        st.markdown("""De plus, on remarque que beaucoup de valeurs 'faibles' sont mals pr√©dites. Ainsi, nous augmentons le seuil (fix√© pr√©c√©demment √† 15g/km) √† 35g/km. """)
        st.code("""df_eu = df_eu.drop(df_eu[df_eu['Ewltp (g/km)'] <=35].index)""")
        
        st.markdown("A la fin de toutes ces √©tapes, nous pouvons observer le r√©sultat final avec les diff√©rentes am√©liorations.")
        df_opti2 = df.loc[(df['MSE']==198.22)|(df['MSE']==173.70)|(df['MSE']==79.78)]
        st.dataframe(df_opti2, use_container_width=True)
        #endregion
    
    with classtab:
        st.subheader("5.3 Mod√®le de classification")
        st.markdown("""Malgr√© les tr√®s bons r√©sultats de notre mod√®le de r√©gression, nous avons voulu tenter d'am√©liorer la performance de notre mod√®le avec des mod√®les de classification.
                    L'id√©e est donc de convertir la variable cible en un label, correspondant aux √©tiquettes de CO2 des v√©hicules.""")
        st.image('image/etiquette_CO2.png', width=250)
        st.markdown("""Nous proc√©dons donc √† la transformation de la variable cible :""")
        st.code(""" #Conversion en DataFrame
y_train_lab = pd.DataFrame(y_train, columns=['Ewltp (g/km)'])
y_test_lab = pd.DataFrame(y_test, columns=['Ewltp (g/km)'])

#Cr√©ation de la fonction d'assignation des labels
def labels(x):
    if x < 101:
        return 'A'
    elif x <= 121:
        return 'B'
    elif x <= 141:
        return 'C'
    elif x <= 161:
        return 'D'
    elif x <= 201:
        return 'E'
    elif x <= 251:
        return 'F'
    else:
        return 'G'

#Cr√©ation d'une nouvelle colonne contenant les labels        
y_train_lab['label']= y_train_lab['Ewltp (g/km)'].apply(labels)
y_test_lab['label'] = y_test_lab['Ewltp (g/km)'].apply(labels)

#Supression des valeurs num√©riques
y_train_lab = y_train_lab['label']
y_test_lab = y_test_lab['label']

""")
        st.markdown("""Puis √† l'encodage : """)
        st.code("""from sklearn.preprocessing import LabelEncoder

#Encodage de la variable cible avec LabelEncoder
le = LabelEncoder()
y_train_lab = le.fit_transform(y_train_lab)
y_test_lab = le.transform(y_test_lab)""")
        df_class = pd.read_excel('tableau.xlsx', sheet_name='confusion')
        classification = st.radio("Mod√®le de classification :",["R√©gression Logistique", "Arbre de d√©cision", "For√™t al√©atoire","XGBoost Classifier"])
        if classification=="R√©gression Logistique":
            df_filtre = df_class.iloc[0:7]
        elif classification=="Arbre de d√©cision":
            df_filtre =df_class.iloc[9:16]
        elif classification=="For√™t al√©atoire":
            df_filtre =df_class.iloc[18:25]
        else :
            df_filtre =df_class.iloc[27:34]
            
        if not df_filtre.empty:
            st.table(df_filtre.reset_index(drop=True))  
        
        st.markdown("""Les r√©sultats des mod√®les de classification : """)
        result_class = pd.read_excel('tableau.xlsx',sheet_name='classification')
        st.dataframe(result_class.iloc[0:4])
        
        
        st.subheader("""5.4 Optimisation des mod√®les de classification""")
        st.markdown("""L'utilisation de GridSearch nous a permis d'am√©liorer la performance de notre mod√®le de classfication, mais cela reste toujours bien en dessous de notre mod√®le de r√©gression.""")
        st.dataframe(result_class.iloc[4:5])
        
if page == pages[6]:  # V√©rification si la page actuelle est la 6e (Conclusion)
    st.header("Synth√®se du Projet")
    st.divider()
    with st.expander('6. Limites et suites du projet'):
        st.write("""
#### Les limites du projet
- Jeu de donn√©es se concentre uniquement sur les √©missions de CO‚ÇÇ, excluant d'autres gaz √† effet de serre comme les oxydes d'azotes(Nox).
- Autres caract√©ristiques techniques non prises en compte :
  - Type de bo√Æte de vitesse et nombre de rapports.
  - R√©gulateur de vitesse.
  - Type de climatisation.
  - Usage du v√©hicule (type de conduite, conditions de conduite, conditions m√©t√©orologiques).
  - Poids du v√©hicule selon le taux de remplissage.
#### Les suites du projet
- Enrichir le jeu de donn√©es avec des caract√©ristiques techniques ou technologiques compl√©mentaires.
- Ajouter de nouvelles donn√©es via le Webscrapping sur les sites des constructeurs automobiles.
- Prendre le temps de ieux trier les valeurs aberrantes du jeu de donn√©es.""")
    with st.expander('6. Les difficult√©s du projet'):
        st.write("""
### Les difficult√©s du projet
- Volum√©trie du jeu de donn√©es : Fichier de plus de 2 Go, n√©cessitant des solutions pour que chaque membre du projet puisse y acc√©der.
- Compr√©hension du jeu de donn√©es : Difficult√©s li√©es √† la compr√©hension des subtilit√©s techniques et des sp√©cificit√©s des donn√©es.
- Nombres de colonnes inutilisables : Suppression de 15 colonnes inutilisables ou non pertinentes.
- Utilisation de GridSearch : Difficult√©s dues √† la gourmandise en ressources de l'outil, n√©cessitant une grande quantit√© de m√©moire et de puissance de calcul.""")
    with st.expander('Conclusion'):
        st.write("""
- Objectif initial : Proposer un outil pour les constructeurs automobiles pour :
  - Projeter les √©missions de CO‚ÇÇ d'un futur v√©hicule.
- Perspectives futures :
  - Int√©grer de nouvelles fonctionnalit√©s.
  - Expansion √† d'autres types de v√©hicules.
""")
    
if page == pages[7]: #D√©mo
    #region Titre formulaire
    st.markdown(f"""
              <style>
              .title {{
                  display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 12vh;
                    font-size: 40px;
                    font-weight: bold;
                    background-color: #7AA95C; 
                    color: white;  
                    border-radius: 10px;
                    padding: 20px;
              }}
              </style>
              <div class="title"> Pr√©diction des √©missions de CO2 </div>
              """,unsafe_allow_html=True)
    #endregion
    st.divider()

    #region Formulaire
    with st.form(key='prediction_form'):
        category = st.segmented_control(label= 'Cat√©gorie', options=['Tourisme','V√©hicule tout-terrain'])
        masse = st.number_input("Poids du v√©hicule (en Kg)",min_value=500.0, max_value= 5000.0, value = 1500.0, step=50.0)
        fuel = st.segmented_control(label="Motorisation",options=['Essence','Diesel','Essence hybride non-rechargeable','Essence hybride rechargeable','Diesel hybride rechargeable','Diesel hybride rechargeable','GPL','Gaz naturel','E85 non-rechargeable','E85 FlexiFuel'])

        autonomie_electrique = st.number_input("Autonomie √©lectrique (km)", min_value=0.0, max_value=700.0, value=0.0, step=5.0)
        capacite_moteur = st.number_input("Capacit√© du moteur (cm3)",min_value=500.0, max_value=8000.0,value=1500.0,step=50.0)
        puiss_moteur = st.number_input("Puissance du moteur(KW)", min_value=5.0, max_value=1200.0, value=110.0, step=10.0)
        reduc_emission = st.number_input("Technologie de r√©duction d'√©mission (g/km)",min_value=0.0, max_value=10.0, value=0.0, step = 0.1)
        consommation = st.number_input("Consommation du moteur (l/100)",min_value=0.0, max_value=30.0, value=6.0, step=0.1)
        
        submit_button = st.form_submit_button(label="Pr√©dire")
    #endregion
    
    #region encodage, chargement du fichier
    df = pd.read_csv('data_cleaned.csv', index_col=0)
    X = df.drop(columns='Ewltp (g/km)')
    y = df['Ewltp (g/km)'] 

    #Diff√©renciation des colonnes num√©riques et cat√©gorielles 
    num_col_NA = ['m (kg)','ec (cm3)','ep (KW)','Fuel consumption ']
    num_col = ['m (kg)','ec (cm3)','ep (KW)','Fuel consumption ','Electric range (km)','Erwltp (g/km)']
    cat_col = ['Ct','fuel_type']

        
    #Gestion des valeurs manquantes
    imputer = SimpleImputer(missing_values=np.nan, strategy='median')
    X.loc[:,num_col_NA] = imputer.fit_transform(X[num_col_NA])

    #Encodage des variables cat√©gorielles
    oneh = OneHotEncoder(drop = 'first', sparse_output=False)
    X_encoded = oneh.fit_transform(X[cat_col])

    #Conversion en DataFrame
    noms_colonnes_cat = oneh.get_feature_names_out(cat_col)
    X_encoded = pd.DataFrame(X_encoded, columns=noms_colonnes_cat, index = X.index)

    #Standardisation des variables num√©riques
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X[num_col])

    #Conversion en DataFrame
    noms_colonnes_num = scaler.get_feature_names_out(num_col)
    X_scaled = pd.DataFrame(X_scaled, columns=noms_colonnes_num, index = X.index)

    #Reconstition du tableau apr√®s encodage
    X.drop(columns=cat_col)
    X = pd.concat([X_encoded,X_scaled], axis = 1)
    #endregion

    #region pr√©dictions 
    if submit_button:
        # Transformation des donn√©es pour correspondre aux colonnes du mod√®le
        data = {
            "Ct_M1G": 1 if category == "V√©hicule tout-terrain" else 0,  # Exemple de transformation binaire
            "fuel_type_DHNR": 1 if fuel == "Diesel hybride non-rechargeable" else 0,
            "fuel_type_DHR": 1 if fuel == "Diesel hybride rechargeable" else 0,
            "fuel_type_E85F": 1 if fuel == "E85 FlexiFuel" else 0,
            "fuel_type_E85NR": 1 if fuel == "E85 non-rechargeable" else 0,
            "fuel_type_GN": 1 if fuel == "Gaz naturel" else 0,
            "fuel_type_GPL": 1 if fuel == "GPL" else 0,
            "fuel_type_P": 1 if fuel == "Essence" else 0,
            "fuel_type_PHNR": 1 if fuel == "Essence hybride non-rechargeable" else 0,
            "fuel_type_PHR": 1 if fuel == "Essence hybride rechargeable" else 0,
            "m (kg)": masse,
            "ec (cm3)": capacite_moteur,
            "ep (KW)": puiss_moteur,
            "Fuel consumption ": consommation,
            "Electric range (km)": autonomie_electrique,
            "Erwltp (g/km)": reduc_emission}
        
        input_df = pd.DataFrame([data])
        input_df[num_col]=scaler.transform(input_df[num_col])
        
        zip_path = "model.zip"
        with zipfile.ZipFile(zip_path,'r') as zip_ref:
            zip_ref.extractall()
        model_path= 'model'
        random_forest = joblib.load(model_path)
        pred = random_forest.predict(input_df)

     #region couleur r√©sultat
        if pred <= 101:
            color = '#048f18'
        elif pred <= 121:
            color = '#6cb71e'
        elif pred <= 141:
            color = '#c0d717'
        elif pred <= 161:
            color = '#fff11c'
        elif pred <= 201:
            color = '#f8bd19'
        elif pred <= 251:
            color = '#f0750d'
        else:
            color = '#d2000b'
    #endregion
        st.markdown(
                f"""
                <style>
                .centered {{
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 10vh;
                    font-size: 50px;
                    font-weight: bold;
                    background-color: {color}; 
                    color: black;  
                    border-radius: 10px;
                    padding: 20px;  /* pour ajouter du padding autour du texte */
                }}
                </style>
                <div class="centered">{np.round(pred[0], 1)} g / km</div>
                """,
                unsafe_allow_html=True
            )
    st.image('image/etiquette_CO2.png')
    #endregion